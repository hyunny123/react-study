[{"/Users/hyunjung/Desktop/udemy/react/test/Ustudy/07-practice/src/index.js":"1","/Users/hyunjung/Desktop/udemy/react/test/Ustudy/07-practice/src/App.js":"2","/Users/hyunjung/Desktop/udemy/react/test/Ustudy/07-practice/src/components/MoviesList.js":"3","/Users/hyunjung/Desktop/udemy/react/test/Ustudy/07-practice/src/components/Movie.js":"4"},{"size":206,"mtime":1648642971000,"results":"5","hashOfConfig":"6"},{"size":1566,"mtime":1662134571875,"results":"7","hashOfConfig":"6"},{"size":448,"mtime":1648642971000,"results":"8","hashOfConfig":"6"},{"size":282,"mtime":1662128889522,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"19nbw52",{"filePath":"13","messages":"14","suppressedMessages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},"/Users/hyunjung/Desktop/udemy/react/test/Ustudy/07-practice/src/index.js",[],[],"/Users/hyunjung/Desktop/udemy/react/test/Ustudy/07-practice/src/App.js",["24"],[],"import React, { useState } from \"react\";\n\nimport MoviesList from \"./components/MoviesList\";\nimport \"./App.css\";\n\nfunction App() {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  async function fetchMoviesHandler() {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(\"https://swapi.dev/api/films/\");\n\n      if (!response.ok) {\n        throw new Error(\"Something went wrong!!!\");\n      }\n      const data = await response.json();\n\n      const transformedMovies = data.results.map((movieData) => {\n        return {\n          id: movieData.episode_id,\n          title: movieData.title,\n          openingText: movieData.opening_crawl,\n          releaseDate: movieData.release_date,\n        };\n      });\n      setMovies(transformedMovies);\n    } catch (error) {\n      setError(error.message);\n    }\n    setIsLoading(false);\n  }\n  let content = <p>Found no movies.</p>;\n\n  if (error) {\n    content = <p>{error}</p>;\n  }\n\n  if (isLoading) {\n    content = <p>Loading...</p>;\n  }\n\n  return (\n    <React.Fragment>\n      <section>\n        <button onClick={fetchMoviesHandler}>Fetch Movies</button>\n      </section>\n      <section>\n        {!isLoading && movies.length > 0 && <MoviesList movies={movies} />}\n        {!isLoading && movies.length === 0 && !error && <p>Found no movies.</p>}\n        {isLoading && error && <p>{error}</p>}\n        {isLoading && <p>Loading...</p>}\n      </section>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","/Users/hyunjung/Desktop/udemy/react/test/Ustudy/07-practice/src/components/MoviesList.js",[],[],"/Users/hyunjung/Desktop/udemy/react/test/Ustudy/07-practice/src/components/Movie.js",[],[],[],{"ruleId":"25","severity":1,"message":"26","line":43,"column":5,"nodeType":"27","messageId":"28","endLine":43,"endColumn":12},"no-unused-vars","'content' is assigned a value but never used.","Identifier","unusedVar"]