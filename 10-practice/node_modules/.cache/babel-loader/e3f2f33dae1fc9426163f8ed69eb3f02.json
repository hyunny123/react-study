{"ast":null,"code":"var _jsxFileName = \"/Users/hyunjung/Desktop/udemy/react/test/Ustudy/10-practice/src/components/SimpleInput.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect } from \"react\";\nimport { useRef, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SimpleInput = props => {\n  _s();\n\n  const nameInputRef = useRef();\n  const [enteredName, setEnteredName] = useState(\"\"); //true로 했기때문에 useEffectf로 확인시 시작할때 값이 유효하다.\n  //단지 에러를 주기 위한 state인데 잘못됨.\n\n  const [enteredNameIsValid, setEnteredNameIsValid] = useState(false); //사용자가 입력란에 입력해서 enteredName이 있는지를 확인.\n\n  const [enteredNameTouched, setEnteredNameTouched] = useState(false);\n  useEffect(() => {\n    if (enteredNameIsValid) {\n      console.log(\"입력창이 유효하다.\");\n    }\n  }, [enteredNameIsValid]);\n\n  const nameInputChangeHandler = e => {\n    //input 요소로 입력된 값에 event.target으로 접근하는것.\n    setEnteredName(e.target.value);\n  }; //ref보다 상태를 사용하는 것이 좋은 이유는?\n  //입력값을 초기화 하고 싶은 경우.\n\n\n  const formSubmissionHandler = e => {\n    //브라우저에서 작동하는 바닐라 자바스크립트를 다루고 있기 때문에.\n    //이폼안에 있는 버튼을 통해 폼제출 웹사이트를 제공하는 서버로 http 요청을 적용.\n    //원하는 서버로 http 요청을 보낸다.\n    //우리에게 서버가 없기때문에 요청이 보내지지 않도록 해야한다.\n    //기본적으로 http 요청을 보내지 않고 아무것도 하지 말라는 명령.\n    e.preventDefault(); //폼이 제출시, 하나이긴 하지만 모든 입력값이 사용자가 확인.\n\n    setEnteredNameTouched(true); //빈문자열일경우 submit 안되게 하기\n\n    if (enteredName.trim() === \"\") {\n      setEnteredNameIsValid(false);\n      return;\n    } //위 조건문 뒤로 실행되면 값이 유효함을 의미하기 때문에 true!\n    //\n\n\n    setEnteredNameIsValid(true);\n    console.log(enteredName);\n    const enteredValue = nameInputRef.current.value;\n    console.log(enteredValue); //input 창에 value props와 연결되어 업데이트 된뒤, 이부분 반영.\n\n    setEnteredName(\"\");\n  }; //입력창을 건들인뒤, 값이 유효하지 않을경우에만 유효하지않게 판단\n\n\n  const nameInputIsInValid = !enteredNameIsValid && enteredNameTouched; //빈칸 submit 할 경우, input창 css 변경.\n  //변경한뒤 className에 변수 넣기.\n\n  const nameInputClasses = nameInputIsInValid ? \"form-control invalid\" : \"form-control \";\n  return (\n    /*#__PURE__*/\n    //form-control이 알맞지 않으면 form-control invalid로 바꿈.\n    _jsxDEV(\"form\", {\n      onSubmit: formSubmissionHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: nameInputClasses,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"name\",\n          children: \"\\uC774\\uB984\\uC744 \\uC791\\uC131\\uD574\\uC8FC\\uC138\\uC694!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          ref: nameInputRef,\n          type: \"text\",\n          id: \"name\",\n          onChange: nameInputChangeHandler,\n          value: enteredName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 9\n        }, this), nameInputIsInValid && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"error-text\",\n          children: \"\\uC785\\uB825\\uCE78\\uC5D0 \\uC774\\uB984\\uC744 \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-actions\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }, this)\n  );\n};\n\n_s(SimpleInput, \"bm/27lsNsiIXuRMukf2inprCLH4=\");\n\n_c = SimpleInput;\nexport default SimpleInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"names":["useEffect","useRef","useState","SimpleInput","props","nameInputRef","enteredName","setEnteredName","enteredNameIsValid","setEnteredNameIsValid","enteredNameTouched","setEnteredNameTouched","console","log","nameInputChangeHandler","e","target","value","formSubmissionHandler","preventDefault","trim","enteredValue","current","nameInputIsInValid","nameInputClasses"],"sources":["/Users/hyunjung/Desktop/udemy/react/test/Ustudy/10-practice/src/components/SimpleInput.js"],"sourcesContent":["import { useEffect } from \"react\";\nimport { useRef, useState } from \"react\";\n\nconst SimpleInput = (props) => {\n  const nameInputRef = useRef();\n  const [enteredName, setEnteredName] = useState(\"\");\n  //true로 했기때문에 useEffectf로 확인시 시작할때 값이 유효하다.\n  //단지 에러를 주기 위한 state인데 잘못됨.\n  const [enteredNameIsValid, setEnteredNameIsValid] = useState(false);\n  //사용자가 입력란에 입력해서 enteredName이 있는지를 확인.\n  const [enteredNameTouched, setEnteredNameTouched] = useState(false);\n\n  useEffect(() => {\n    if (enteredNameIsValid) {\n      console.log(\"입력창이 유효하다.\");\n    }\n  }, [enteredNameIsValid]);\n\n  const nameInputChangeHandler = (e) => {\n    //input 요소로 입력된 값에 event.target으로 접근하는것.\n    setEnteredName(e.target.value);\n  };\n\n  //ref보다 상태를 사용하는 것이 좋은 이유는?\n  //입력값을 초기화 하고 싶은 경우.\n  const formSubmissionHandler = (e) => {\n    //브라우저에서 작동하는 바닐라 자바스크립트를 다루고 있기 때문에.\n    //이폼안에 있는 버튼을 통해 폼제출 웹사이트를 제공하는 서버로 http 요청을 적용.\n    //원하는 서버로 http 요청을 보낸다.\n    //우리에게 서버가 없기때문에 요청이 보내지지 않도록 해야한다.\n    //기본적으로 http 요청을 보내지 않고 아무것도 하지 말라는 명령.\n    e.preventDefault();\n    //폼이 제출시, 하나이긴 하지만 모든 입력값이 사용자가 확인.\n    setEnteredNameTouched(true);\n\n    //빈문자열일경우 submit 안되게 하기\n    if (enteredName.trim() === \"\") {\n      setEnteredNameIsValid(false);\n      return;\n    }\n    //위 조건문 뒤로 실행되면 값이 유효함을 의미하기 때문에 true!\n    //\n    setEnteredNameIsValid(true);\n    console.log(enteredName);\n    const enteredValue = nameInputRef.current.value;\n    console.log(enteredValue);\n\n    //input 창에 value props와 연결되어 업데이트 된뒤, 이부분 반영.\n    setEnteredName(\"\");\n  };\n  //입력창을 건들인뒤, 값이 유효하지 않을경우에만 유효하지않게 판단\n  const nameInputIsInValid = !enteredNameIsValid && enteredNameTouched;\n  //빈칸 submit 할 경우, input창 css 변경.\n  //변경한뒤 className에 변수 넣기.\n  const nameInputClasses = nameInputIsInValid\n    ? \"form-control invalid\"\n    : \"form-control \";\n\n  return (\n    //form-control이 알맞지 않으면 form-control invalid로 바꿈.\n\n    <form onSubmit={formSubmissionHandler}>\n      <div className={nameInputClasses}>\n        <label htmlFor=\"name\">이름을 작성해주세요!</label>\n        <input\n          ref={nameInputRef}\n          type=\"text\"\n          id=\"name\"\n          onChange={nameInputChangeHandler}\n          value={enteredName}\n        />\n        {nameInputIsInValid && (\n          <p className=\"error-text\">입력칸에 이름을 입력해주세요!</p>\n        )}\n      </div>\n      <div className=\"form-actions\">\n        <button>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n"],"mappings":";;;AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,MAAT,EAAiBC,QAAjB,QAAiC,OAAjC;;;AAEA,MAAMC,WAAW,GAAIC,KAAD,IAAW;EAAA;;EAC7B,MAAMC,YAAY,GAAGJ,MAAM,EAA3B;EACA,MAAM,CAACK,WAAD,EAAcC,cAAd,IAAgCL,QAAQ,CAAC,EAAD,CAA9C,CAF6B,CAG7B;EACA;;EACA,MAAM,CAACM,kBAAD,EAAqBC,qBAArB,IAA8CP,QAAQ,CAAC,KAAD,CAA5D,CAL6B,CAM7B;;EACA,MAAM,CAACQ,kBAAD,EAAqBC,qBAArB,IAA8CT,QAAQ,CAAC,KAAD,CAA5D;EAEAF,SAAS,CAAC,MAAM;IACd,IAAIQ,kBAAJ,EAAwB;MACtBI,OAAO,CAACC,GAAR,CAAY,YAAZ;IACD;EACF,CAJQ,EAIN,CAACL,kBAAD,CAJM,CAAT;;EAMA,MAAMM,sBAAsB,GAAIC,CAAD,IAAO;IACpC;IACAR,cAAc,CAACQ,CAAC,CAACC,MAAF,CAASC,KAAV,CAAd;EACD,CAHD,CAf6B,CAoB7B;EACA;;;EACA,MAAMC,qBAAqB,GAAIH,CAAD,IAAO;IACnC;IACA;IACA;IACA;IACA;IACAA,CAAC,CAACI,cAAF,GANmC,CAOnC;;IACAR,qBAAqB,CAAC,IAAD,CAArB,CARmC,CAUnC;;IACA,IAAIL,WAAW,CAACc,IAAZ,OAAuB,EAA3B,EAA+B;MAC7BX,qBAAqB,CAAC,KAAD,CAArB;MACA;IACD,CAdkC,CAenC;IACA;;;IACAA,qBAAqB,CAAC,IAAD,CAArB;IACAG,OAAO,CAACC,GAAR,CAAYP,WAAZ;IACA,MAAMe,YAAY,GAAGhB,YAAY,CAACiB,OAAb,CAAqBL,KAA1C;IACAL,OAAO,CAACC,GAAR,CAAYQ,YAAZ,EApBmC,CAsBnC;;IACAd,cAAc,CAAC,EAAD,CAAd;EACD,CAxBD,CAtB6B,CA+C7B;;;EACA,MAAMgB,kBAAkB,GAAG,CAACf,kBAAD,IAAuBE,kBAAlD,CAhD6B,CAiD7B;EACA;;EACA,MAAMc,gBAAgB,GAAGD,kBAAkB,GACvC,sBADuC,GAEvC,eAFJ;EAIA;IAAA;IACE;IAEA;MAAM,QAAQ,EAAEL,qBAAhB;MAAA,wBACE;QAAK,SAAS,EAAEM,gBAAhB;QAAA,wBACE;UAAO,OAAO,EAAC,MAAf;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QADF,eAEE;UACE,GAAG,EAAEnB,YADP;UAEE,IAAI,EAAC,MAFP;UAGE,EAAE,EAAC,MAHL;UAIE,QAAQ,EAAES,sBAJZ;UAKE,KAAK,EAAER;QALT;UAAA;UAAA;UAAA;QAAA,QAFF,EASGiB,kBAAkB,iBACjB;UAAG,SAAS,EAAC,YAAb;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QAVJ;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,eAcE;QAAK,SAAS,EAAC,cAAf;QAAA,uBACE;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MADF;QAAA;QAAA;QAAA;MAAA,QAdF;IAAA;MAAA;MAAA;MAAA;IAAA;EAHF;AAsBD,CA7ED;;GAAMpB,W;;KAAAA,W;AA+EN,eAAeA,WAAf"},"metadata":{},"sourceType":"module"}